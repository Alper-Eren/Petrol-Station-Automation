/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Otomasyon;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

/**
 *
 * @author mustafa
 */
public class PompaTakibi extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public static Double ToplamLitre;
    public static Double YakitFiyat;
    private Anasayfa anasayfa;
    private ServerApp server;
    private String tmp = null;
    private static Date tarihSaat = null;

    public PompaTakibi(Anasayfa anasayfa, ServerApp server) {
        this.anasayfa = anasayfa;
        this.server = server;
        
        initComponents();
        updateTarih();
        pompaGoruntule();
        pompaYukle();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        pompaView1 = new Otomasyon.PompaView();
        pompaView2 = new Otomasyon.PompaView();
        pompaView3 = new Otomasyon.PompaView();
        pompaView4 = new Otomasyon.PompaView();
        pompaView5 = new Otomasyon.PompaView();
        pompaView6 = new Otomasyon.PompaView();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTarihSaat = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pompaView1.pompaNo.setText("1");
        getContentPane().add(pompaView1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 55, -1, -1));

        pompaView2.pompaNo.setText("2");
        getContentPane().add(pompaView2, new org.netbeans.lib.awtextra.AbsoluteConstraints(484, 55, -1, -1));

        pompaView3.pompaNo.setText("3");
        getContentPane().add(pompaView3, new org.netbeans.lib.awtextra.AbsoluteConstraints(962, 55, -1, -1));

        pompaView4.pompaNo.setText("4");
        getContentPane().add(pompaView4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 380, -1, -1));

        pompaView5.pompaNo.setText("5");
        getContentPane().add(pompaView5, new org.netbeans.lib.awtextra.AbsoluteConstraints(484, 380, -1, -1));

        pompaView6.pompaNo.setText("6");
        getContentPane().add(pompaView6, new org.netbeans.lib.awtextra.AbsoluteConstraints(962, 380, -1, -1));

        jButton1.setText("Anasayfa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anasayfaMenu(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jLabel1.setText("GÃ¼ncel Tarih ve Saat :");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 20, -1, -1));

        jTarihSaat.setText("--.--.--   --.--");
        getContentPane().add(jTarihSaat, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 20, 130, -1));
        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateTarih() {
        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        tarihSaat = new Date(System.currentTimeMillis());
                        SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy HH:mm");
                        String tmp = formatter.format(tarihSaat);
                        jTarihSaat.setText(tmp);

                        Thread.sleep(1000);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
        th.start();
    }


    private void anasayfaMenu(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anasayfaMenu
        // TODO add your handling code here:
        this.setVisible(false);
        anasayfa.setVisible(true);
    }//GEN-LAST:event_anasayfaMenu

    /**
     * @param args the command line arguments
     */
    static double round4Decimals(double d) {
        DecimalFormat twoDForm = new DecimalFormat("#.####");
        return Double.valueOf(twoDForm.format(d));
    }

    public static void setPompa(PompaView pompa, String[] messages) {
        pompa.pompaNo.setText(messages[0]);
        pompa.pompaci.setText("Pompaci " + messages[1]);
        pompa.plakaNo.setText(messages[2]);
        pompa.yakitTipi.setText(messages[3]);
        pompa.fiyat.setText(messages[5]);
        pompa.toplamTutar.setText(messages[6]);

        SimpleDateFormat tarihFormatter = new SimpleDateFormat("dd.MM.yyyy  HH:mm");

        pompa.tarih.setText(tarihFormatter.format(tarihSaat));

        YakitFiyat = Double.parseDouble(messages[5].replace(",", "."));
        YakitFiyat = round4Decimals(YakitFiyat);

        ToplamLitre = Double.parseDouble(messages[4].replace(',', '.'));
        ToplamLitre = round4Decimals(ToplamLitre);

        final Double tutar = round4Decimals(Double.parseDouble(messages[6].split(" ")[0]));
        pompa.litre.setText(ToplamLitre.toString());

        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                pompa.yakitDoldur(ToplamLitre, YakitFiyat, tutar);
            }
        });
        th.start();
    }

    public void pompaYukle() {
        SqlConnection connection = new SqlConnection();

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

        Date nextDay = new Date(System.currentTimeMillis() + 24 * 60 * 60 * 1000);

        ResultSet rs = connection.executeQuery("select * from Satis where zaman >='" + formatter.format(tarihSaat) + "' and zaman <='" + formatter.format(nextDay) + "'");
        try {
            HashSet<Integer> enSonPompalar = new HashSet<>();

            while (rs.next()) {
                List<String> dataList = new ArrayList<>();
                if (!enSonPompalar.contains(rs.getInt(3))) {
                    for (int i = 2; i < 10; i++) {
                        dataList.add(rs.getString(i));
                    }
                    setOnePompa(dataList);
                    enSonPompalar.add(rs.getInt(3));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void setOnePompa(List<String> data) {
        PompaView p = getPompa(Integer.parseInt(data.get(1)));

        p.plakaNo.setText(data.get(0));
        p.pompaNo.setText(data.get(1));
        p.pompaci.setText("Personel" + data.get(2));
        p.yakitTipi.setText(data.get(3));
        p.fiyat.setText(data.get(4) + " TL");
        p.toplamTutar.setText(data.get(5) + "TL");
        p.litre.setText(data.get(6) + " LT");

        p.anlikLitre.setText(data.get(6) + " LT");
        p.anlikFiyat.setText(data.get(5) + " TL");
        
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        SimpleDateFormat yeniformatter = new SimpleDateFormat("dd.MM.yyyy  HH:mm");
        
       
        try {
            p.tarih.setText(yeniformatter.format(formatter.parse(data.get(7))));

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public PompaView getPompa(Integer id) {
        if (id == 1) {
            return pompaView1;
        } else if (id == 2) {
            return pompaView2;
        } else if (id == 3) {
            return pompaView3;
        } else if (id == 4) {
            return pompaView4;
        } else if (id == 5) {
            return pompaView5;
        } else if (id == 6) {
            return pompaView6;
        }
        return null;
    }

    public void pompaGoruntule() {

        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                String[] messages = null;
                while (true) {
                    try {
                        if (tmp == null ? server.getMessage() != null : !tmp.equals(server.getMessage())) {
                            messages = server.getMessage().split("-");

                            setPompa(getPompa(Integer.parseInt(messages[0])), messages);

                            tmp = server.getMessage();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        });
        th.start();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    public javax.swing.JLabel jTarihSaat;
    public static Otomasyon.PompaView pompaView1;
    public static Otomasyon.PompaView pompaView2;
    public static Otomasyon.PompaView pompaView3;
    public static Otomasyon.PompaView pompaView4;
    public static Otomasyon.PompaView pompaView5;
    public static Otomasyon.PompaView pompaView6;
    // End of variables declaration//GEN-END:variables

}
